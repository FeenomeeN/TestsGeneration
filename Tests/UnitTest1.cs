using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using TestsGeneratorLib;
using System.Threading.Tasks;
using System;

namespace Tests
{
    [TestClass]
    public class UnitTest1
    {
        public static int i = 0;

        private List<SyntaxNode> _roots;

        private List<string> _methodList;

        string Path = @"C:\TestsGeneration-main\Files";
        string PathToFolder = @"C:\TestsGeneration-main\GeneratedTests";

        IEnumerable<string> files;
        ITestGenerate gen;

        [TestInitialize]
        public void Setup()
        {
            files = Directory.GetFiles(Path);
        }



        [TestMethod]
        public void TracerFilesAmountTest()
        {
            Assert.AreEqual(1, _roots.Count, "Неверное количество созданных файлов: "+_roots.Count);
        }
        
        [TestMethod]
        public void TracerUsingTest()
        {
            IEnumerable<UsingDirectiveSyntax> imports =
               _roots[0].DescendantNodes().OfType<UsingDirectiveSyntax>().ToList();
            Assert.AreEqual(1, imports.Count(), "количество импортов не совпало с ожидаемым");
            foreach (UsingDirectiveSyntax usage in imports)
            {
                Assert.AreEqual("Microsoft.VisualStudio.TestTools.UnitTesting", usage.Name.ToString(),
                    "импорт не совпал с ожидаемым");
            }
        }

        [TestMethod]
        public void TracerMethodTest()
        {
            IEnumerable<MethodDeclarationSyntax>
               methods = _roots[0].DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();
            Assert.AreEqual(3, methods.Count(), "Количество методов класса не совпало с ожидаемым");
            foreach (MethodDeclarationSyntax method in methods)
            {
                _methodList.Remove(method.Identifier.ValueText);
                Assert.IsTrue(method.Modifiers.Any(SyntaxKind.PublicKeyword), "У метода непубличный модификатор доступа");
                Assert.AreEqual("void", method.ReturnType.ToString(), "Тип возвращаемого значения не воид");
                Assert.AreEqual("[TestMethod]", method.AttributeLists.ToString(),
                    "Атрибут метода не совпал с ожидаемым");
                Assert.AreEqual("Assert.Fail(\"autogenerated\");", method.Body.Statements.ToString(),
                   "Тело метода не совпало с ожидаемым");
            }
        }

        [TestMethod]
        public void ThrowsException()
        {
            if (!Directory.Exists(PathToFolder))
            {
                Directory.CreateDirectory(PathToFolder);
            }
            List<string> f = files.ToList();
            f.Add("/");
            ITestGenerate t = new DumbTestGenerator();
            Task task = new Pipeline().Generate(f, PathToFolder, t);

            try
            {
                task.Wait();
            }
            catch (Exception e) { };

            Assert.IsTrue(i > 0);
        }


        [TestMethod]
        public void TracerClassTest()
        {
            IEnumerable<ClassDeclarationSyntax> classes =
              _roots[0].DescendantNodes().OfType<ClassDeclarationSyntax>().ToList();

            Assert.AreEqual(1, classes.Count(), "Неверное количество классов: "+ classes.Count());

            foreach (ClassDeclarationSyntax syntax in classes)
            {
                Assert.IsTrue(syntax.Modifiers.Any(SyntaxKind.PublicKeyword), "У класса приватный модификатор доступа");
                Assert.AreEqual(3, syntax.Members.Count, "Неверное количество методов в классе");
                Assert.AreEqual("TracerClassTest", syntax.Identifier.ValueText,
                    "Название созданного класса не совпало с ожидаемым");
                Assert.AreEqual("[TestClass]", syntax.AttributeLists.ToString(),
                    "Атрибут созданного класса не совпал с ожиданием");
            }

        }
    }
    class DumbTestGenerator : ITestGenerate
    {
        Dictionary<string, string> ITestGenerate.GenerateTests(TestsGeneratorLib.Info.FileInfo fileInfo)
        {
            UnitTest1.i++;
            return new Dictionary<string, string>();
        }
    }
}
